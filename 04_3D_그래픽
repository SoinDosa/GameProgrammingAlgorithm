3D의 기초
  GPU덕분에 요즘은 소프트웨어 래스터화 알고리즘을 따로 구현할 필요가 없음
    래스터 주사 : 점(pixel)로 이루어지는 수평 주사선을 화면의 위에서부터 아래로 내려가며 옆으로 끌듯이 한줄 씩 주사하며 화면을 형성하는 주사 방식
    이와 달리 펜으로 그리듯이 자유로이 주사하는 방식을 '벡터 주사'라고 함
  OpenGL과 DirectX같은 라이브러리를 사용햇 3D장면을 그리는데 필요한 데이터를 그래픽카드가 원하는 방식으로 전달하는 쪽으로 초점이 옮겨짐
  3D게임의 경우 CG와는 다르게 60FPS정도에 맞춰서 그래픽을 그려내야하므로 CG영화와는 다르게 빛의 효과를 실사와 같은 수준으로 계산할 시간이 부족하여 추정치를 사용해야할 때가 많다
    추정치로 인해 발생하는 그래픽오류를 그래픽 아티팩트라고 하며 이를 완전히 극복할 수 있는 게임은 없다
폴리곤 
  3D 오브젝트를 표현하는 방법은 다양하지만 게임에서는 주로 폴리곤(삼각형)을 이용해서 3D오브젝트를 표현함
    삼각형인 이유는? : 3개의 vertex로 표현할 수 있는 가장 간단한 다각형이기도 하고, 삼각형을 사용하면 모든 3D오브젝트를 빈틈이나 기타 변형 없이 모든 면을 채울 수 있음
  메시 : 하나의 모델을 뜻함, 수많은 삼각형으로 이루어져 있음
  모든 그래픽 라이브러리는 그래픽카드가 그려야 할 삼각형의 목록을 지정하는 방법을 지니고있고, 목록에 속한 삼각형을 그리는 방법에 관한 정보도 제공해야함.
좌표공간
  좌표공간은 각 장면의 기준틀을 제공, 데카르트 좌표공간은 중앙이 원점이며 모든 위치는 중앙을 기준으로 함
  다른 원점을 기준으로 하는 좌표곤간이 있을 수도 있음
  3D 렌더링 파이프라인을 통해 3D모델을 2D모니터에 표시하려면 네 개의 주요 좌표공간을 거쳐야함
    모델공간
    월드공간
    뷰, 카메라공간
    투영공간
  모델공간
    모델의 모든 버텍스는 모델 자체의 원점을 기준으로 표현해야함
    모델 공간의 원점은 모델의 중앙일 때가 많음. 그러나 인간형 모델은 두 발 사이가 원점이어야 다루기 쉬움
  월드공간 
    레벨을 제대로 로드하기 위한 새로운 좌표계
    월드 공간의 원점은 게임 세계 전체의 원점이며 모든 오브젝트의 위치와 방향은 월드공간의 원점을 기준으로 함
    메모리에 모델을 로드했을 때 모델의 모든 버텍스는 모델 공간을 기준으로 놓여있고, 이를 하나하나 직접 바꾸는 것은 어렵다
    대신 그래픽 카드에 각 모델을 그릴 위치, 회전, 스케일 데이터를 전달하는 방법을 사용한다
    이로한 추가 데이터를 만들기 위해 행렬을 이용, 행렬을 사용하려면 모델의 위치를 동차좌표라는 다른 형식으로 바꿔서 표현해야함
      동차좌표
        3D 공간에서 사용하는 4D 좌표, 네 번째 성분을 w성분이라고 함
        w성분은 0 or 1, w=0이면 3D벡터를 나타내는 동차좌표, w=1이면 점을 나타내는 동차좌표라는 의미
      행렬을 사용해서 4D벡터 변환
      <img src="01_4D_convert.jpg">
      변환행렬
        정해진 방식으로 벡터나 점을 변경할 수 있는 행렬, 이를 사용하면 모델 공간 좌표를 월드 공간 좌표로 바꿀 수 있음
        대부분 4*4 행렬이나, 신축행렬과 회전행렬은 필요에 따라 3*3 행렬로 사용하기도 함
        신축행렬(scale matrix)
          정해진 크기로 만들어진 모델을, 모든 버텍스에 적절한 신축행렬을 곱하여 배율을 늘림
          <img src="02_scale_matrix.jpg">
        이동행렬(translation matrix)
          점의 위치를 정해진 양만큼 옮김. 벡터에는 적용할 수 없음
          이동행렬의 역행렬을 구하려면 각 이동 성분의 기호를 반대로 바꿔줘야함
          <img src="03_translation_matrix.jpg">
        회전행렬(rotation matrix)
          좌표축을 기준으로 벡터나 점을 회전시킬 수 있는 행렬
          데카르트 좌표축마다 하나씩으로 총 3개
          회전행렬을 이용한 회전 방식을 오일러 회전(Euler rotations)이라고 함
          <img src="04_rotation_matrix.jpg">
  다중변환 적용
    원하는 월드변환 행렬을 얻으려면 여러 종류의 변환을 합쳐야 할 때도 있음
    변환 행렬을 합치려면 그냥 곱하면 되나. 행렬의 곱셈은 교환법칙이 성립하지 않으므로 순서가 중요하다.
    행 우선 표현일 때 일반적인 월드 변환 순서는 다음과 같다
      월드변환 = 신축 * 회전 * 이동
 뷰, 
          
