구현 방법을 살펴보기 전에 게임에 가장 널리 쓰이는 3D카메라의 종류를 살펴볼 필요가 있음

플레이어가 조종할 수 없는 고정 카메라
  항상 똑같은 위치에 놓여있는 카메라를 말함. 아주 간단한 3D게임에만 사용
  의미를 넓혀서 플레이어 캐릭터의 위치에 따라 미리 정해진 위치로 이동하는 카메라까지도 포함
  카메라의 위치와 한계점은 게임디자이너가 레벨을 만들면서 설정함
  한 때 레지던트 이블같은 서바이벌 호러게ㅔ임에서 큰 인기를 누림, 보이지않는 구석에 위협을 숨겨놓는 등 호러게임의 긴장감을 조성하는데 사용됨
  디자이너에게는 고정 카메라가 긴장을 조성할 기회였을지 몰라도 카메라를 조종할 수 없다는 점 때문에 불만을 느끼는 플레이어도 있음
  고정카메라를 구현하는 방법의 하나는 각 카메라의 위치를 나타내는 볼록 폴리곤의 목록을 만들고,
  플레이어가 움직이면 볼록 폴리곤 내의 점을 찾는 알고리즘을 사용해서 현재 플레이어가 속한 볼록 폴리곤을 확인한 뒤, 해당 볼록 폴리곤과 일치하는 카메라를 선택
일인칭카메라(first-persion camera)
  게임세계를 돌아다니는 플레이어 캐릭터의 시점을 그대로 보여주는 카메라. 캐릭터의 시점을 그대로 가져오므로 가장 실감나는 카메라임
  가장 일반적인 구현 방법은 카메라를 플레이어 캐릭터의 눈높이에 배치해서 바라보게 하는 것
  문제는 카메라를 눈높이에 맞춰놓으면 캐릭터가 정면을 바라보는 상태에서 절대로 캐릭터의 손을 볼 수 없음.
  더 큰 문제는 캐릭터 모델을 사용해서 플레이어 캐릭터를 그리면 카메라가 모델의 내부를 비추는 어이없는 그래픽오류를 겪을 가능성이 큼
  이로 인해 일반적인 캐릭터 모델을 사용하지 않음, 해부학적으로 터무니없는 위치에 팔다리만 달린 특별한 모델을 사용하는 경우가 있음
수행 카메라(follow camera)
  어떻게든 타겟 오브젝트를 뒤쫒아가는 카메라. 자동차의 뒤를 따라가는 레이싱게임이나 삼인칭 액션 어드벤처 등 다양한 장르에 사용 가능
  다양한 형태의 게임에 사용할 수 있는 만큼 수많은 변종이 존재
  융통성 없이 우직하게 타깃을 쫒기만 하는 수행카메라도 있고 어느정도 융통성을 지닌 수행카메라도 있음
  플레이어가 카메라를 회전시킬 수 있는 수행카메라도 있으며 뒤쪽 상황을 볼 수 있게 즉시 뒤로 돌리는 수행카메라도 있음
컷신 카메라 
  잠시 게임플레이를 끊고 이야기의 전개를 보여주는 컷신을 사용하는 게임이 늘고 있음
  3D게임에서 컷신을 구현하려면 최소한 애니메이션을 재생하는 동안 여러 대의 고정 카메라를 순서대로 지정할 수 있는 시스템이 필요
  대부분 게임의 컷신은 패닝 등 실제 영화 제작에 쓰이는 카메라 기법을 다양한 방식으로 활용하며, 이를 구현하려면 스플라인 시스템을 함께 사용함
  
원근투영
  원근 투영은 원근감을 표현함
 
시야각(FOV, filed of view)
  한 번에 볼 수 있는 세계의 양을 나타내는 각도. 사람의 눈 한 쌍으로 볼 수 있는 시야각은 거의 180도에 달함
  하지만 모든 각도를 뚜렷하게 볼 수는 없음. 두 눈의 시야가 겹쳐지는 각도는 대략 120도 정도, 나머지 시야각은 주변 시야라고 하며 움직임은 감지할 수 있으나 제대로 초점을 맞추지 못함
  원근 투영을 사용하려면 눈의 피로를 유발하거나 플레이어에 따라 멀미를 일으킬 수 있으므로 신중하게 고려해야함
  HDTV에서 콘솔 게임을 플레이하는 플레이어의 시야각에 관해 알아보자
  <img src="/01_FOV_HDTV.jpg">
    HDTV의 권장 시청거리는 화면 대각선 길이의 1.2배 이상, 이 거리에서 TV의 화각(viewing angle)은 약 40도
    즉 TV를 보는 사람의 시야각 중에 40도를 차지한다는 의미, TV용 게임은 시야각이 40도만 넘으면 예민한 플레이어라도 게임을 보면서 아무런 문제를 느끼지 못함
    이는 콘솔게임의 시야각이 대부분 약 65도인 이유.
    하지만 시야각이 65도인 게임을 PC에서 플레이한다면? PC용 모니터는 두 눈의 시야각을 더 많이 차지하므로 화각과 실제 시야각의 차이 때문에 불편함을 호소하는 플레이어가 생길 수 있음
    이런 문제때문에 PC게임은 설정을 통해 플레이어가 원하는 시야각을 선택할 수 있는 기능을 마련해두는 편
  시야각이 커지면 게임 세계가 더 많이 보임. 시야각이 너무 커지면 초광각렌즈의 사진처럼 화면의 모서리 쪽에 왜곡이 생기는 어안렌즈 효과(fisheye effect)가 일어날 수 있음
  대부분의 게임은 플레이어가 지나치게 큰 시야각을 설정할 수 없게 제한하나 일부러 이런 시야각을 구현한 게임 MOD도 존재  
종횡비
  뷰의 가로, 세로 비율을 말함. 전체화면으로 실행하는 게임의 경우 사용 중인 디스플레이의 해상도가 곧 종횡비에 해당함. 
  단 화면을 나눠서 멀티플레이 모드를 지원하는 게임은 예외. 이러한 게임은 뷰포트가 여러개고 뷰포트의 종횡비는 화면의 종횡비와 다를 수 있음
  이와 같은 예외를 제외하면 가장 많이 쓰이는 종횡비는 4:3(1024*768, 요즘 사용하지 않음), 16:9(1280*720, HDTV로 인해 가장유행하는 종횡비가 됨), 16:10(컴퓨터용 모니터)
  
카메라 구현 
  원근 투영과 다양한 카메라의 기본 원리를 소개했으므로 몇 가지 카메라의 구현 방법을 자세히 알아보자
  기본적인 수행 카메라
    미리 정해놓은 수평, 수직 수행 거리만큼 떨어진 채로 항상 오브젝트의 뒤를 따라다님
    <img src="/02_follow_camera_basic.jpg">
    카메라의 뷰 행렬을 만드려면 카메라의 위치(눈), 카메라가 바라보는 대상, 위쪽을 가리키는 벡터 등 세가지 파라미터가 필요
    기본적인 수행 카메라의 눈은 타겟에서 수평, 수직 수행거리만큼떨어진 곳에 위치. 눈을 계산하고 나면 뷰행렬을 만드는 함수인 CreateLookAt에 전달할 나머지 파라미터 계산 가능
//tPos = 타깃의 위치를 나타내는 벡터, tUp = 타깃의 위쪽을 가리키는 벡터
//fForward = 타깃이 향하는 방향을 가리키는 벡터
//hDist = 수평 수행 거리
//vDist = 수직 수행 거리

function BasicFollowCamera(Vector3 tPos, Vector3 tUp, Vector3 tForward, float hDist, float vDist)
  //타깃 위치와 수행 거리의 차이를 바탕으로 눈의 위치를 구함
  Vector3 eye = tPos - tForward * hDist + tUp * vDist
  
  //카메라의 방향은 눈에서 타깃을 향한다
  Vector3 cameraForwad = tPos - eye
  cameraForwad.Normalize()
  
  //외적을 사용해서 카메라의 왼쪽을 향하는 벡터를 계산한 뒤, 카메라의 위쪽을 향하는 벡터를 계산
  Vector3 cameraLeft = CrossProdict(tUp, cameraForwad)
  cameraLeft.Normalize()
  Vector3 cemeraUp = CrossProduct(cameraForwad, cameraLeft)
  cameraUp.Normalize()
  
  //눈의 위치, 타겟의 위치, 카메라의 위쪽을 향하는 벡터럴 CreateLookAt 함수로 전달
  return CreateLookAt(eye, tPos, cameraUp)
end
    타깃을 제대로 따라다니기는 하겠지만 너무 뻣뻣해 보일 수 있음. 특히 카메라가 회전할 때 타깃이 회전하는지 게임 세계가 타깃의 주위를 회전하는지 구분하기 어려움
    또한 타깃의 이동속도가 다랄져도 타깃과의 거리가 바뀌지 않아 속도감이 느껴지지 않을 수도 있음. 미적인 측면이 매우 미흡
    속도감을 개선할 수 있는 간단한 방법은 수평 수행 거리를 타깃의 이동속도에 관한 함수로 만는 것. 이를 통해 속도감문제는 해결할 수 있으나 전체적으로 뻣뻣해보이는건 어쩔 수 없음
  스프링이 달린 수행 카메라
    타깃의 위치와 방향이 바뀌면 몇 프레임에 걸쳐서 위치를 맞춰가는 카메라
    스프링이 달린 카메라를 만들려면 이상적인 카메라의 위치와 실제 카메라의 위치, 이렇게 두 개의 위치가 필요
    이상적인 카메라의 위치는 프레임마다 즉시 업데이트 해야하며, 기본적인 수행 카메라와 똑같이 수평 수행거리를 구하는 함수 등으로 구할 수 있음
    그런 다음 실제 카메라가 이상적인 카메라와 약간의 차이를 두고 천천히 따라오게 하면 카메라의 움직임이 훨씬 부드러워짐
    이렇게 구현하려면 카메라의 이상적인 위치오 ㅏ실제 위치가 가상의 인장스프링(<->압축스프링)을 통해 이어져 있다고 생각
    스프링의 탄력은 용수철 상수에 따라 달라짐. 즉 용수철 상수의 값이 크면 스프링의 탄성력이 줄어들기 때문에 카메라가 이상적인 위치에 더 가까이 머문다
    스프링이 달린 수행카메라를 구현하려면 프레임마다 카메라의 속도와 실제 카메라의 위치를 확인해야함
    가장 간단한 구현 방법은 클래스를 사용하는 것, 용수철 상수를 바탕으로 스프링의 가속도를 계산한 뒤, 수치 적분을 통해 가속도에서 카메라의 속도를 구하고
    다시 한 번 적분을 통해 위치를 구함
스프링이 달린 카메라 클래스 
class SpringCamera
  //수평, 수직 수행거리
  float hDist, vDist
  //용수철 상수(spring constant)가 커지면 스프링의 탈력이 줄어듬
  //시작 값은 카메라를 움직이고 싶은 범위에 따라 달라짐
  float springConstant
  //용수철 상수를 바탕으로 한 감쇠(dampening)상수
  float dampConstant
  
  //속도 벡터와 카메라의 실제 위치를 나타내는 벡터
  Vector3 velocity, actualPosition
  
  //카메라가 따라다닐 타겟 오브젝트, 타겟오브젝트는 위치, 방향 벡터, 타깃의 위쪽을 가리키는 벡터를 지님
  GameObject target
  //최종 카메라 행렬
  Matrix cameraMatrix
  
  //이 함수는 실제 카메라의 위치와 타겟의 위치를 사용해서 카메라행렬을 계산
  function ComputeMatrix()
    //카메라의 방향은 실제 카메라의 위치에서 타겟의 위치로 향함
    Vector3 cameraForwad = target.position - actualPosition
    cameraForwad.Normalize()
    
    //외적을 사용해서 카메라의 왼쪽을 향하는 벡터를 계산한 뒤에, 카메라의 위쪽을 향하는 벡터를 계산
    Vector3 cameraLeft = CrossProduct(target.up, caemraForward)
    cameraLeft.Normalize()
    Vector3 cameraUp = CrossProduct(cameraForward, cameraLeft)
    cameraUp.Normalize()
    
    //CreateLookAt에 카메라의 눈, 타겟의 위치, 위쪽을 가리키는 벡터 전달
    cameraMatrix = CreateLookAt(actualPosition, target.position, cameraUp)
  end
  
  //필요한 상수와 카메라의 방향을 초기화하는 함수
  function Initialize(GameObject myTarget, float mySpringConstant, float myHDist, float MyVDist)
    target = myTarget
    springConstant = mySpringConstant
    hDist = myHDist
    vDist = myVDist
    
    //용수철 상수를 바탕으로 감쇠상수를 계산
    dampConstant = 2.0f * sqrt(springConstant)
    
    //이상적인 위치를 실제 위치의 초기값으로 삼음, 기본적인 수행 카메라의 눈의 위치와 비슷
    actualPosition = target.position - target.forward * hDist + target.up * vDist
    
    //카메라속도의 초기값은 0이어야 함
    velocity = Vector3.Zero
    
    //카메라행렬에 초기값을 설정
    ComputeMatrix()
  end
  
  function Update(float deltaTime)
    //먼저 이상적인 위치를 계산
    Vector3 idealPosition = target.position + target.forward * hDist + target.up * vDist
    
    //이상적인 위치에서 실제 위치로 향하는 벡터를 구함
    Vector3 displacement = actualPosition - idealPosition
    //스프링의 가속도를 구한 뒤에 적분
    Vector3 springAccel = (-springConstant * displacement) - )dampConstant * velocity)
    velocity += springAccel * deltaTime
    actualPosition += velocity * deltaTime
    
    //카메라 행렬을 업데이트
    ComputeMatrix()
  end
end

  궤도 카메라(orbit camera)
    궤도를 따라 타깃의 주위를 도는 카메라. 가장 간단한 구현 방법은 카메라의 위치를 저장할 때 월드 공간을 기준으로 카메라의 위치를 저장하지 않고,
    타겟과의 거리 차이인 오프셋만 저장하는 것. 회전은 항상 중심을 기준으로 하므로 카메라의 위치로 오프셋을 저장해둔 뒤, 타겟 오브젝트를 중심으로 삼고
    오프셋을 반경으로 하는 회전을 적용하면 궤도상의 회전을 정확하게 구현할 수 있음
    일반적으로 궤도 카메라를 사용하는 게임의 조작체계는 플레이어에게 요와 피치를 허용하고 롤은 허용하지 않음
      롤(roll) : x축을 기준으로 하는 회전
      피치(pitch) : y축을 기준으로 하는 회전
      요(yaw) : z축을 기준으로 하는 회전
    대부분의 입력장치는 요와 피치에 해당하는 입력이 따로 있으므로 두 종류의 회전으로 궤도 카메라를 구현하는 방식이 가장 무난함
    게임세계의 위쪽을 향하는 축을 기준으로 카메라의 위쪽을 향하는 벡터와 타겟에서 카메라를 향하는 오프셋 벡터를 회전해서 요를 수행
    그런 다음 카메라의 왼쪽을 향하는 벡터를 기준으로 카메라의 위쪽을 향하는 벡터와 타겟에서 카메라를 향하는 오프셋 벡터를 회전해서 피치를 수행
    요든 피치든 카메라가 타겟보다 아래쪽에 놓이는 상황에 올바르게 대처하려면 카메라의 위쪽을 향하는 벡터를 함께 회전시켜야함
    회전의 구현방법은? 해당 코드는 사원수를 사용하고 있지만 행렬로도 구현할 수 있음. 또한 구면 좌표를 사용해서 완전히 다른 방식으로 구현할 수 있음
궤도카메라 클래스
class OrbitCamrea
  // 카메라의 위쪽을 가리키는 벡터
  Vector3 up
  //타겟과의 오프셋을 나타내는 벡터
  Vector3 offset
  //타겟 오브젝터
  GameObject target
  //최종 카메라 행렬
  Matrix cameraMatrix
  
  //카메라 초기화
  function Initialize(GameObject myTarget, Vector3 myOffset)
    //Y축이 위쪽을 향하는 월드면 Y축이 곧 위쪽을 향하는 벡터라 볼 수 있음
    up = Vector3(0, 1, 0)
    
    offset = myOffset
    target = myTarget
    
    //CreateLookAt에 카메라의 눈, 타겟, 위쪽을 향하는 벡터를 전달
    cameraMatrix = CreateLookAt(target.position + offset, target.position, up)
  end
  
  //현재 프레임에서 증가한 요, 피치의 각도를 바탕으로 업데이트
  function Update(float yaw, float pitch)
    //월드의 위쪽을 향하는 벡터를 기준으로 회전을 수행하는 사원수를 만듬
    Quternion quatYaw = CreateFromAxisAngle(Vector3(0, 1, 0), yaw)
    //이 사원수를 사용해서 카메라 오프셋 벡터와 카메라의 위쪽을 향하는 벡터를 변환
    offset = Transform(offset, quatYaw)
    up = Transform(up, quatYaw)
    
    //카메라의 방향은 target.position - (target.position + offset)이므로 결국 -offset임
    Vector3 forward = -offset
    forward.Normalize()
    Vector3 left = CrossProduct(up, forward)
    left.Normalize()
    
    //카메라의 왼쪽을 향하는 벡터를 기준으로 회전을 수행하는 사원수를 만듬
    Quternion quatPitch = CreateFromAxisAngle(left, pitch)
    //이 사원수를 사용해서 카메라 오프셋 벡터와 카메라의 위쪽을 향하는 벡터를 변환
    offset = Transform(offset, quatPitch)
    up = Transform(up, quatPitch)
    
    //이제 행렬을 계산
    cameraMatrix = CreateLookAt(target.position + offset, target.position, up)
  end
end
    궤도를 따라 카메라가 회전하는 기능과 함께 스프링을 적용해야하는 게임도 있을 수 있음.
  
  일인칭 카메라
    항상 플레이어 캐릭터의 위치를 기준으로 조금 위쪽, 즉 수직방향으로 오프셋만큼 떨어진 곳에 위치. 따라서 플레이어가 게임세계를 돌아다니더라도 카메라는
    플레이어의 위치에서 수직오프셋만큼 떨어진 위치를 유지함. 하지만 카메라의 오프셋이 바뀌지않아도 타깃의 위치는 얼마든지 바뀔 수 있음.
    대부분 일인칭 게임은 캐릭터가 제자리에 서서 주위를 둘러보거나 몸의 방향만 돌리는 기능을 지원하기 때문
    <img src="/03_first_person_camera.jpg">
    회전의 구현 방법은 카메라의 회전과 비슷하나 가장 큰 차이는 궤도와 카메라의 오프셋이 아닌 타깃과 카메라의 오프셋을 회전시켜야 한다는 점
    하지만 그 밖에 다른 점은 게임 세계의 위쪽을 축으로 타겟과의 오프셋이 회전할 때 캐릭터도 똑같은 방식으로 회전해줘야 한다는 것, 일반적으로 일정한 각도이상은 피치가 불가능한 제한
    이런 제한 때문에 일인칭 카메라에서는 보통 피치와 요의 각도를 프레임당 변화량이 아닌 총 변화량으로 저장함
    즉 궤도 카메라처럼 증가한 각도만 회전하지 않고 항상 타겟의 초기 오프셋에 각도의 총 변화량을 적용햇 ㅓ회전한다는 의미
일인칭카메라 class 
class FirstPersonCamera
  //플레이어 캐릭터의 위치에서 시작하는 카메라의 수직 오프셋
  //Y축이 위쪽을 향하는 게임 세계라면 이 벡터는 (0, 오프셋 값, 0)
  Vector3 verticalOffset
  //카메라에서 시작하는 타겟의 오프셋(위치)
  //Z축이 앞쪽을 향하는 게임 세계라면 이 벡터는 (0, 0, 오프셋 값)
  Vector3 targetOffset
  //요, 피치의 총 각도
  float totalYaw, totalPitch
  //일인칭 카메라를 적용할 플레이어 오브젝트
  GameObject Player
  //실제 카메라행렬(뷰 행렬)
  Matrix cameraMatrix
  
  //카메라에 관한 모든 파라미터를 초기화하는 함수
  function Initialize(GameObject myPlayer, Vector3 myVerticalOffset, Vector3 myTargetOffset)
    player = myPlayer
    verticalOffset = myVerticalOffset
    targetOffset = myTargetOffset
    
    //처음에는 요, 피치가 없음
    totalYaw = 0
    totalPitch = 0
    
    //카메라행렬 계산
    Vector3 eye = player.position + verticalOffset
    Vector3 target = eye + targetOffset
    //Y가 위쪽인 게임세계일 때
    Vector3 up = Vector3(0, 1, 0)
    cameraMatrix = CreateLookAt(eye, target, up)
  end
  
  //현재 프레임에서 증가한 요, 피치의 각도를 더해서 업데이트
  function Update(float yaw, float pitch)
    totalYaw += yaw
    totalPitch += pitch
    
    //각도 제한을 기준으로 총 피치 각도를 고정(clamp), 이 예제에서는 45도, 즉 0.78라디안으로 제한
    totalPitch = Clamp(totalPitch, -0.78, 0.78)
    
    //타겟 오프셋은 회전을 적용하기 전을 나타내고 실제 오프셋은 회전을 적용한 후를 나타냄
    Vector3 actualOffset = targetOffset
    
    //Y축을 기준으로 실제 오프셋의 요를 수행
    Quaternion quatYaw = CreateFromAxisAngle(Vector3(0, 1, 0), totalYaw)
    actualOffset = Transform(actualOffset, quatYaw)
    
    //피치에 사용할 왼쪽으로 향하는 벡터를 계산, 요 후에 실제 오프셋이 바로 앞쪽을 향하는 벡터
    Vector3 forward = actualOffset
    forward.Normalize()
    Vector3 left = CrossProduct(Vector3(0, 1, 0), forward)
    left.Normalize()
    
    //왼쪽으로 향하는 베거를 기준으로 실제 오프셋의 피치를 수행
    Quaternion quatPitch = CreateFromAxisAngle(left, totalPitch)
    actualOffset = Transform(actualOffset, quatPitch)
    
    //이제 카메라 행렬을 만듬
    Vector3 eye = player.position + verticalOffset
    Vector3 target = eye + actualOffset
    //이 예제는 회전 때문에 위아래 뒤바뀔 일이 절대 없으므로 세 번째 파라미터로 그냥 게임세계의 위쪽을 가리키는 벡터를 전달
    cameraMatrix = CreateLookAt(eye, target, Vector3(0, 1, 0))
  end
end

  스플라인 카메라 
    수학적 정의는 조금 저 구체적이지만 게임에서 스플라인은 곡선상에 놓인 일련의 점으로 만들어지는 곡선이라 생각해도 무방
    스플라인을 사용하면 시간에 따라 오브젝트를 매끄러운 곡선 형태로 움직일 수 있으므로 게임에서 많이 쓰이는 알고리즘의 하나이다
    미리 정해놓은 스플라인 경로를 따라 카메라를 움직일 수 있기 때문에 컷신 카메라 구현에 매우 유용함
    스플라인의 형태는 다양하지만 가장 간단한 형태 중 하나는 캣멀롬(Catmull-Rom)스플라인
      인접한 두 제어점과 이전, 이후의 제어점을 알면 인접한 두 제어점 사이를 보간할 수 있음
      <img src="/04_catmull_rom_spline.jpg">
      P1과 P2는 각각 t=0, t=1에 해당하는 제어점이고 P0과 P3는 이전, 이후의 제어점. 제어점의 수에는 제한이 없으며 이전, 이후의 제어점만 있다면 경로를 무한히 늘릴 수 있음
      네 개의 제어점이 주어지면 다음 방정식을 사용해서 0과 1 사이의 t에 해당하는 스플라인 상의 위치를 계산할 수 있음
      <img src="/05_catmull_rom_spline_equation.jpg">
      이 방정식은 네 개의 제어점이 같은 공간에 속할 때만 적용할 수 있다는 점에 주의.
      이 방정식 덕분에 다음과 같이 제어점의 수와 무관한 간단한 캣멀롬 스플라인 클래스를 구현할 수 있음
class CRSpline
  //제어점을 나타내는 벡터의 동적 배열
  Vector controlPoints
  
  //첫 번째 파라미터는 t=0에 해당하는 시작제어점, 두 번째 파라미터는 t 값
  function(int start, float t)
    //네 제어점 start - 1, start + 1, start + 2가 모두 존재하는지 확인
    ...
    Vector3 P0 = controlPoints[start-1]
    Vector3 P1 = controlPoints[start]
    Vector3 P2 = controlPoints[start+1]
    Vector3 P3 = controlPoints[start+2]
    
    //캣멀롬 방정식을 사용해서 위치를 계산
    Vector3 position = 0.5*((2 * P1) + (-P0 + P2) * t + (2 * P0 - 5 * P1 + 4 * P2 - P3) * t * t + (-P0 + 3 * P1 - 3 * P2 + P3) * t * t * t)
    return position
  end
end
    또한 같은 방정식을 사용해서 0과 1사이에 있는 t에서의 접선도 계산할 수 있음.
    먼저 정상적으로 t의 위치를 계산, 그런 다음 t에 t보다 약간 큰 △t를 더한 위치를 계산. 두 위치를 구하고 나면 P(t)에서 P(t+△t)로 향하는 벡터를 만들고 졍구화할 수 있음
    이 벡터는 접선 벡터와 거의 일치하는데 이 방법은 일종의 수치 미분이라 할 수 있음.
    카메라가 스플라인을 따라 이동한다면 접선 벡터는 카메라의 방향을 가리키는 벡터와 일치. 스플라인을 따라 이동하는 카메라를 거꾸로 뒤집을 수 없다는 전제하에
    위치와 방향 벡터를 구하고 나면 카메라 행렬을 만들 수 있음. 다음은 이렇게 구현한 스플라인 카메라의 코드임
class SplineCamera
  //카메라가 따라가야 할 스플라인 경로
  CRSpline path
  //현재 제어점을 가리키는 인덱스와 t 값
  int index
  float t
  //속도는 초당 t의 변화량을 나타냄
  float speed
  //실제 카메라행렬
  Matrix cameraMatrix
  
  //현재 제어점과 t에 관한 카메라 행렬을 계산
  function ComputMatrix()
    //눈의 위치는 현재 제어점과 t에서의 스플라인 값
    Vector3 eye = path.Compute(index, t)
    //조금 더 앞쪽의 점을 구해서 타겟의 위치로 삼음
    Vector3 target = path.Compute(index, t + 0.05f)
    //Y축이 위쪽을 향하는 게임세계일 때
    Vector3 up = Vector3(0, 1, 0)
    cameraMatrix = CreateLookAt(eye, target, up)
  end
  
  function Initialize(float mySpeed)
    //제어점의 초기 인덱스 값은 1이어야 함, 0은 원래 P0기 때문
    index = 1
    t = 0.0f
    speed = mySpeed
    
    ComputeMatrix()
  end
  
  function Update(float deltaTime)
    t += speed * deltaTime
    
    //t >= 1.0f면 다음 제어점으로 넘어가야함
    //이 코드는 카메라의 속도가 한 프레임에 두 개 이상의 제어점을 건너뛸 정도로 빠르지 않다고 가정
    if t >= 1.0f
      index++
      t = t - 1.0f
    end
    
    //index + 1과 index + 2가 유효한 제어점인지 확인해야함, 유효한 제어점이 아니라면 스플라인 경로의 끝까지 왔다는 의미
    ...
    
    ComputeMatrix()
  end
end
  
카메라를 뒷받침하는 알고리즘
  지금까지 배운 구현방법은 성공적인 카메라 구현의 극히 일부일 뿐. 플레이어가 만족할 만한 카메라를 구현하려면 그 밖에도 카메라를 뒷받침하는 다양한 알고리즘을 고려해야함
  카메라 충돌
    카메라와 타겟 사이에 불투명한 오브젝트가 껴서 시야를 가로막고 있는 상태를 카메라 충돌이라고 함
    이 문제는 다양한 형태의 카메라를 구현할 때 흔히 발생하는데 가장 간단한 해결 방법은 타겟의 위치에서 카메라의 위치로 레이캐스트를 수행하는 것
    레이캐스트에 걸리는 오브젝트가 있으면 카메라를 시야를 가리는 오브젝트의 앞으로 옮기는 것. 하지만 카메라가 급격히 움직이므로 상당히 눈에 거슬릴 수 있는 해결책임
    카메라를 물리 오브젝트로 구현하는 방법이 더 확실한 해결책이나 매우 복잡함
    그 밖에 ㅏ메라가 타겟 오브젝트에 너무 가까워질 때도 생각해야함.
    가까운 평면은 카메라의 눈보다 조금 앞쪽에 위치하므로 카메라가 너무 가까우면 타겟 오브젝트의 일부가 사라질 수 있음
    가장 흔한 해결책은 카메라가 타겟에 너무 가까워지면 타겟을 감추거나 타겟의 알파값을 제거하는 것
    시야를 가로막는 오브젝트의 알파값을 제거하는 방법으로도 카메라 충돌 문제를 해결할 수 있음
  픽킹(picking)
    클릭이나 탭을 통해 3D 세계의 오브젝트를 선택할 수 있는 기능을 의미
    RTS게임에서 많이 사용 됨. 엄밀히 말해 픽킹은 카메라 알고리즘이 아니지만 카메라, 투영과 깊은 관련이 있음
    월드 공간에 속한 위치를 투영 공간, 화면 공간으로 변환하려면 카메라행렬 또는 뷰행렬에 투영행렬을 곱해야함
    하지만 마우스로 클릭하거나 손가락으로 터치한 위치는 분명 2D인 화면공간에 속함.
    따라서 화면 공간의 2D위치를 월드 공간으로 되돌리는 언프로젝션(unprojection)이라는 변환이 필요.
    언프로젝션을 수행하려면 원래 변환을 역으로 수행할 수 있는 행렬이 필요함. 행 우선 표현일 때 다음과 같이 카메라행렬과 투영행렬을 곱한 행렬의 역행렬이 필요하다는 의미
    언프로젝션행렬 = (카메라행렬X투영행렬)^-1
    하지만 2D인 위치에 4X4행렬을 곱할 수 없으므로 먼저 2D위치에 z, w 성분을 추가해서 동차 좌표로 변환해야함.
    z 성분은 2D인 위치를 변환해서 가까운 평면에 놓을지, 먼 평면에 놓을지에 따라 0이나 1로 설정한다. 그리고 '점'이므로 w성분은 항상 1이다.
    다음 Unproject함수는 이미 z, w성분을 적절하게 추가했다고 가정하고 4D벡터를 인수로 넘겨받음
function Unproject(Vector4 screenPoint, Matrix camera, Matrix projection)
  //카메라행렬X투영행렬의 역행렬을 계산
  Matrix unprojection = camera * projection
  unprojection.Invert()
  
  return Transform(screenPoint, unprojection)
end
  이제 Unproject함수를 사용해서 z=0일 때 가까운 평면에 언프로젝션한 마우스의 위치와 z=1일 때 먼 평면에서 언프로젝션한 마우스의 위치, 두 점을 계산할 수 있음
  월드 공간에 속하는 이 두 점을 레이캐스트의 시작점과 끝점으로 사용하면 게임 세계 내에서 선택할 수 있는 모든 오브젝트를 확인할 수 있음
  레이캐스트에 여러 오브젝트가 걸린다면 가장 가까운 오브젝트를 선택해야함
  <img src="/06_picking.jpg">
  
연습문제
  1. 시야각이란 무엇인가? 또 시야각이 좁을 때 발생할 수 있는 문제점은 무엇?
  2. 수평, 수직으로 거리를 두고 타겟을 따라다니는 기본적인 수행 카메라를 구현하는 방법을 설명
    기본적인 수행 카메라의 위치는 다음 식을 사용해서 계산할 수 있음
    눈의 위치 = 타겟의 위치를 나타내는 벡터 - (타겟이 향하는 방향 * 수평 수행 거리) + (타겟의 위쪽을 가리키는 벡터 * 수직 수행거리)
    눈의 위치를 계산하고 나서 다음과 같이 눈에서 타겟으로 향하는 벡터를 만들면 이 벡터가 카메라의 방향을 나타내는 벡터
    카메라의 방향 = 눈의위치 - 타겟의 위치
    그런 다음 타겟의 위쪽을 향하는 벡터와 카메라의 방향벡터를 외적해서 카메라의 왼쪽을 향하는 벡터를 계산 후, 마지막으로 카메라의 방향벡터와 왼쪽을 향하는 벡터를 외적해서 카메라의
    위쪽을 향하는 벡터를 얻음
  3. 기본적인 수행 카메라를 스프링이 달린 수행 카메라로 개선하는 방법을 설명
    스프링이 달린 카메라는 카메라의 이상적인 위치와 실제 위치를 지님. 이상적인 위치는 기본적인 수행 카메라와 같은 방식으로 프레임마다 업데이트해야하고
    실제 위치는 이상적인 위치보다 조금 늦게 업데이트
  4. 궤도 카메라를 구현하려면 카메라의 위치를 어떤 방식으로 저장해야하는가?
    카메라의 위치를 다겟 오브젝트와의 거리 차이인 오프셋으로 지정하여 회전을 적용
  5. 일인칭 카메라가 타겟의 위치를 추적하는 방법을 설명
    타겟의 위치를 카메라에서 떨어진 거리인 오프셋으로 저장하고 캐릭터가 회전하면서 주위를 둘러보면 타겟의 위치도 함께 회전
  6. 캣멀롬 스플라인이란?
    보간할 두 점과 이전, 이후의 제어점, 이렇게 해서 최소 네 개의 제어점으로 정의할 수 있는 스플라인 곡선의 의미
  7. 스플라인 카메라가 유용할 때는?
  8. 수행 카메라와 타겟 사이에 낀 오브젝트가 계속 카메라를 가로막는 상황을 해결하는 방법 두 가지를 설명
  9. 언프로젝션에서 z성분이 0일 때와 1일 때의 의미를 설명
  10. 픽킹을 구현할 때 언프로젝션의 역할을 설명
    피킹을 구현하려면 먼저 2D인 점을 가까운 평면과 먼 평면에 언프로젝션해야함
    그런 다음 상의 두 점 사이에 레이 캐스트를 수행하면 교차한 오브젝트를 확인할 수 있음
