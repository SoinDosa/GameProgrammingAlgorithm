벡터의 길이
<img src="/01_Vector_Length.jpg">

벡터의 정규화
  벡터를 길이가 1인 벡터로 변환하는 것
<img src="/02_normalization.jpg">

벡터의 내적
  결과값은 스칼라 값
<img src="/03_dot_product.jpg">
<img src="/04_dot_product_cos.jpg">
  이 공식을 이용해 쎄타값을 유도할 수 있음
<img src="/05_dot_product_arccos.jpg">
  두 단위벡터의 내적이 0이면 서로 직각을 이루는 벡터(cos90 = 0), 1이면 평행한 채 같은 방향을 향하는 벡터라는 뜻이고, -1이면 평행한 채 방향이 반대인 벡터라는 뜻
<img src="/06_dot_product_scalar_projection.jpg">
  스칼라 투영은 내적의 중요한 특성임
예제) 스칼라 투영을 이용한 반사 벡터 구하기
<img src="/07_dot_product_reflection.jpg">

벡터의 외적
  결과값은 벡터값, 이는 두 벡터로 이루어진 평면에 수직인 법선(normal)벡터이다. 법선은 방향이 중요할 뿐 크기는 쓸모 없으므로 항상 정규화해야한다
<img src="08_cross_product.jpg">
  외적의 결과 모든 성분이 0이라면 두 벡터는 공선(collinear) 벡터로 동일 선상에 놓인 벡터라는 의미이다.

<img src="09_cross_product_right_hand.jpg">
  외적의 오른손법칙, 검지는 x축, 중지는 y축, 엄지는 외적의 결과. 이는 좌표계에 따라 왼손법칙이 적용될 수도 있다
  
선형보간법 
  lerp라고 하며 두 값을 잇는 직선 사이에 있는 값을 구하는 방법
  실수뿐 아니라 모든 차원의 값에 적용할 수 있다
  게임에서 선형보간은 두 점 사이의 한 점을 찾는데 주로 쓰임
<img src="10_lerp.jpg">
<img src="11_lerp_result.jpg">

좌표계
  오른손 좌표계, 왼손 좌표계가 존재하며 이는 외적의 결과를 다르게 함
  DirectX : y가 위쪽을 향하는 왼손좌표계
  OpenGL : y가 위쪽을 향하는 오른손좌표계
  
행렬
  역행렬
    본래 모습과 곱하면 단위행렬이 되는 행렬
  전치행렬(transpose)
    행을 열로 바꾼 행렬
  직교행렬(orthonormal)
    역행렬과 전치행렬이 같은 행렬, 회전행렬은 직교행렬의 일종임

행렬을 사용한 3차원 벡터 변환
  벡터에 행렬 변환을 적용하려면 둘을 곱해야한다.
  벡터를 행렬로 표현해야 곱할수가 있는데, 방법은 두 가지
    하나의 행을 지니는 행렬(행우선)
    하나의 열을 지니는 행렬(열우선)
    OpenGL을 제외한 대부분 3D게임 라이브러리는 행 우선 방식을 사용함
    
연습문제
  2. 벡터를 정규화해야 할 때와 하지 말아야 할 때를 간단하게 설명하라
    방향에만 관심있는 벡터라면 정규화하는 편이 유용하다. 방향과 크기를 모두 신경써야할 벡터라면 정규화하지 말아야한다.
  7. 회적을 할 때 벡터의 순서가 바뀌면 결과에 어떤 영향을 주는가?
    법선의 방향이 반대로 바뀐다
  10. 전치행렬과 역행렬이 같을 때는?
    직교행렬일 
