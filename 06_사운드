기본적인 사운드
  하나의 이벤트가 반드시 하나의 사운드와 부합할 필요는 없다. 발걸음을 예로 들면 여러 개의 발걸음 소리를 준비하고 캐릭터가 발을 디딜 때마다 발걸음 소리중 하나를 무작위로 재생하는 것
  그 밖에 동시에 재생하 수 있는 사운드 하나하나를 뜻하는 채널의 수에 한계가 있다는 점을 고려해야한다. 즉 사운드에 일종의 우선순위를 매길 방법이 필요함
  이러한 이유로 대부분 게임은 사운드 파일을 재생해야 할 방법과 상황을 나타내는 부가 데이터를 따로 저장함
소스데이터
  사운드 디자이너가 툴을 사용해서 만든 원본 오디오 파일을 말함. 일반적으로 짧은 음향효과는 WAV파일이나 기타 미압축 파일 형식으로 저장하고,
  음악이나 대화처럼 긴 사운드는 MP3나 OGG같은 압축 형식으로 저장
  게임에서 사운드 파일을 재생할 때 널리 쓰이는 방법은 두 가지
   짧은 음향효과는 미리 메모리에 올려 재생하여 재생할 때마다 디스크에서 불러오느라 시간낭비 하는 것을 방지
   크기가 큰 음향파일은 사운드 파일을 플레이하는 동안 필요한 부분을 디스크에서 조금씩 로드하는 스트림 형태로 저장
  다양한 플랫폼을 지원해야 할 때 가장 널리 쓰이는 솔루션은 OpenAL
사운드큐(Sound cue)
  사운드 이벤트라고도 하며 사운드 큐에는 하나 이상의 소스 데이터 파일을 매핑할 수 있음
  실제로 게임 코드를 작성할 때는 fs1.wav파일을 직접 재생하는 코드가 아닌 'footstep'이라는 사운드 큐를 작동하는 코드를 작성해야함
  사운드 큐는 소스데이터파일과 사운드에 관한 메타데이터를 얼마든지 담을 수 있는 컨테이너라고 생각하면 됨
  예시) 폭발음 큐가 있다고 할 때, 이 큐는 다섯 개의 폭발음 WAV파일 중 하나를 무작위로 재생함
  또한 폭발음은 멀리서도 들을 수 있는 소리이므로 소리가 들리는 최대 거리를 나타내는 메타 정보가 있어야하며 큐의 우선순위를 높게 매겨야 모든 채널이 사용 중이어도 폭발소리를 들을 수 있음
  <img src="/01_sound_cue.jpg">
  게임에서 사용할 폭발음의 메타데이터를 저장하는 방법은 다양하나 그 중 하나는 JSON파일로 저장하는 것
폭발JSON 
{
  "name": "explosion",
  "falloff": 150,
  "priority": 10,
  
  "sources":
  {
    "explosion1.wav",
    "explosion2.wav",
    "explosion3.wav"
  }
}
굳이 JSON이 아니어도 유연한구조를 지닌 형식이라면 상관없음. 저장해놓은 데이터를 파싱하는 동안 바로 다음과 같은 사운드 큐 클래스로 변환할 수 있음
사운드큐 클래스
class SoundCue
  string name
  int falloff
  int priority
  //모든 사운드소스를 나타내는 문자열 리스트
  List sources;
  
  function Play()
    //소스를 무작위로 선택해서 재생
    ...
  end
end
이 정도로 충분한 게임도 많지만 앞서 소개된 발검음소리 예제에 쓰기엔 캐릭터가 바위, 모래, 유리 등 다양한 재질을 다닐 수 있기에 부족함
사운드를 캐릭터가 밟는 재질별로 묶은 뒤에 현재 재질에 해당하는 묶음 내에서 무작위로 소스를 선택할 방법이 필요함
개선된 큐의 JSON파일
{
  "name": "footstep",
  "falloff": 25,
  "priority": "low",
  "switch_name": "foot_surface",
  
  "sources":
  {
    {
      "switch": "sand",
      "sources":
      [
        "fs_sand1.wav",
        "fs_sand2.wav",
        "fs_sand3.wav"
      ]
    },
    {
      "switch": "grass",
      "sources":
      [
        "fs_grass1.wav",
        "fs_grass2.wav",
        "fs_grass3.wav"
      ]
    }
  }
}
SoundCue 클래스에 기능을 추가하는 방식으로도 구현할 수 있으나 다음과 같이 SoundCue클래스와 새로운 SwitchableSoundCue클래스가 모두 구현해야하는 ISoundCue인터페이스를 만드는게 낫다
interface ISoundCue
  function Play()
end

class SwitchableSounCue implements ISoundCue
  string name
  int falloff
  int priority
  string switch_name
  
  //(소스 묶음을 나타내는 문자열, 소수 파일 리스트) 쌍을 저장할 해시 맵
  // 예시)("sand", ["fs_sand1.wav","fs_sand2.wav","fs_sanf3.wav"]) 같은 데이터쌍을 저장함
  HashMap sources
  
  function Play()
    //switch_name의 현재 값을 얻는다.
    //그런 다음 해시 맵에 들어있는 리스트를 검색해서 무작위로 사운드를 재생한다
    ...
  end
end
이 코드가 제 몫을 하려면 코드 어디에서나 스위치의 값을 얻어오고 설정할 수 있어야 함, 그래야만 플레이어의 달리기를 처리하는 코드가 발걸음 큐를 작동하기 전에 바닥의 재질을 확인해서
스위치에 적절한 값을 설정할 수 있고, 발검음 소리 큐의 Play()함수가 스위치의 현재 값을 얻어서 재질에 맞는 발걸음 소리를 재생할 수 있다

3D 사운드
  일반적으로 2D 사운드에는 위치의 개념이 없으므로 대부분 2D게임은 왼쪽, 오른쪽 스피커에서 똑같은 소리가 나옴.
  사운드에 패닝, 거리에따른 볼륨감소 등 위치 개념을 적용한 2D게임도 있으나 흔치않음
  3D 게임의 3D사운드는 소리의 위치가 매우 중요. 대부분의 사운드가 위치와 관련 있으며 리스너(listener)와의 거리와 방향에 따라 사운드의 다양한 특성이 바뀐다
    리스너는 3D세계의 소리를 수집하는 가상 마이크라 할 수 있음
  3D 게임에서도 UI사운드, 내레이션, 배경효과음, 배경음악 등에는 여전히 2D 사운드를 사용함. 하지만 게임세계 내에서 발생하는 모든 효과는 3D사운드로 표현함
리스너와 이미터(listener and emitter)
  리스너 : 게임세계의 소리를 수집하는 역할을 함
  이미터 : 음향효과를 방출하는 역할을 함
  리스너와 이미터의 방향에 따라 소리가 들릴 스피커가 정해진다
  리스너는 3D 세계의 모든 소리를 수집하므로 리스너의 위치와 방향은 매우 신중하게 결정해야함
  카메라의 위치와 방향을 그대로 리스너에 적용해야 하는 게임도 많다. 예시)FPS게임, 카메라가 정해진 경로를 따라 이동하는 컷신
  카메라의 위치와 방향을 리스너에 그대로 적용할 수없는 게임도 있다. 예시)3인칭 액션게임 등
    예시와 같은 경우 리스너의 위치와 방향을 플레이어에 맞추면 되지 않을까? 라고 생각할 수 있으나 문제가 하나 발생
      카메라와 플레이어의 중간 위치에서 폭발이 일어날 경우 카메라의 앞쪽이지만 리스너의 뒤쪽이므로 뒤쪽 스피커가 울릴 수 있음.
      더 나아가 카메라를 따로 회전시킬 수 있는 게임이라면 폭발이 오른쪽에 일어나나 리스너의 왼쪽에 있으므로 왼쪽스피커가 울릴 수 있음
      이러한 괴리감을 방지하기위해 리스너의 방향을 플레이어가 아닌 카메라의 방향에 맞추고 플레이어와 카메라 사이에 배치하는 방법을 사용할 수 있음
감쇠(falloff)
  리스너에서 멀어짐에 따라 사운드의 볼륨을 줄이는 방법
  소리의 측정단위인 데시벨(dB)은 로그 단위이므로 데시벨의 감쇠비율은 로그를 사용해서 계산해야함, 하지만 분명 다른 감쇠방법도 있음
  포인트 라이트와 마찬가지로 더 많은 파라미터를 추가할 수도 있음.
  감쇠를 적용할 '안쪽'반경을 지정하는 파라미터나 벗어나면 자동으로 소리를 꺼버릴 '바깥쪽'반경을 지정하는 파라미터 등
  사운드 디자이너가 거리에 따라 각각 다른 식으로 작용하는 다중 감쇠기능을 만들 수 있는 사운드 시스템도 있음
서라운드 사운드
  입체 음향이라고도함. 이를 지원하지 않는 플랫폼도 있음, 예시)모바일 기기는 스테레오를 지원하는 정도가 고작임
  하지만 PC나 콘솔게임에서는 스피커가 세 개 이상일 수 있음. 예시) 5.1채널 서라운드 시스템은 일반적인 스피커 다섯개와 저주파 효과(LFE)채널용 서브우퍼 한개로 이루어짐
  서라운드 사운드가 한층 수준 높은 게임경험을 제공한다고는 하나 실제로 이러한 사운드시스템을 갖춘 플레이어가 거의 없으므로 서라운드 사운드에 의존하는 게임을 만들면 성공하기 어려움

디지털 신호 처리(DSP, Digital Signal Processing)
  넓은 의미에서는 신호를 수치화해서 조작하는 것, 오디오 분야에서 DPS란 대개 사운드 소스 파일을 변경해서 원래 사운드와 다른 식으로 재생하는 것을 말함
  예시) 사운드의 피치(pitch)를 높이거나 낮춰서 재생하는 효과
  실시간으로 DSP효과를 적용하면 사운드 파일을 미리 만드는 것보다 저장공간을 절약할 수 있다는 장점이 있음
  실제로 DSP효과를 구현하려면 푸리에변환같은 고급 수학 연산과 선형계에 관한 지식이 필요함
널리 쓰이는 DSP효과 
  게임에서 가장 널리 쓰이는 DSP효과의 하나는 반향(reverb). 사방이 막힌 공간에서 크게 울리는 소리를 만들고 싶다면 일종의 반향을 구현해야함
  그 밖에 많이 쓰이는 DSP 효과로 도플러효과를 구현할 때 쓰이는 피치 시프트(pitch shift)라는 효과가 있음
    주파수를 변경해서 사운드의 피치를 높이거나 낮추년 효과, RPM에 따라 엔진소리의 피치를 조절해야하는 자동차 레이싱 게임등에 쓰일 수 있음
  게임에서 쓰이는 기타 DSP 효과는 대부분 데시벨 레벨 출력이라고 하는 주파수의 범위를 변경하는 효과
  예시) 컴프레서(compressor)는 아주 작은 볼륨을 증폭하고 아주 큰 소리의 볼륨을 줄이는 식으로 볼륨의 범위를 좁힘
  이는 각 사운드 파일의 볼륨이 크게 차이날 때 볼륨을 일정하게 고르는 용도로 사용할 수 있는 효과임
  예시2) 기준치(cutoff)를 초과하는 주파수를 지닌 사운드의 볼륨과 피치를 줄이는 로우패스 필터(low-pass filter)
  플레이어 근처에서 폭발이 일어날 때 '셸 쇼크(shell shock)' 상태를 적용하는 게임에서 흔히 쓰이는 효과.
    셀 쇼크를 표현하려면 시간이 천천히 흐르게 해야하고, 로우패스필터를 적용해야하며, 따로 윙윙 울리는 사운드를 재생해야 함
영역지정
  반향 효과는 물론이고 레벨 전체에 균일하게 작용해야하는 DSP효과는 드뭄
  DSP효과는 대개 레벨 내의 정해진 영역에만 작용해야 할 가능성이 큼. 예시) 야외지역과 작은 동굴로 나뉜 레벨에서는 반향은 동굴안에서만 작용해야함
  가장 간단한 방법의 하나는 지면 위에 볼록 다각형을 놓는 것. 
  볼록다각형(convex polygon) : 모든 버텍스가 바깥쪽을 향하는 다각형, 즉 모든 내각이 180도 미만인 다각형
  볼록 다각형을 사용하는 이유 : 임의의 점이 볼록 다각형의 안에 있는지 밖에 있는지 비교적 간단하게 확인할 수 있기 때문
  볼록 다각형을 이용해서 반향 효과를 적용할 영역을 지정하고 나면 플레이어의 위치가 이 영역의 안쪽에 속하는지 바깥쪽에 속하는지 확인할 수 있음
    영역 안쪽에 있다면 반향 효과를 적용하고 바깥쪽에 있다면 적용하지 않는다.
  // 볼록 다각형의 안쪽에 있는지 아닌지 확인하는 알고리즘은 DSP외에도 다방면으로 쓰이므로 7장 물리학에서 다시 설명함
  하지만 동굴에 들어가자마자 갑자기 반향을 적용하면 귀에 거슬릴 수 있으므로 플레이어가 들어서면 서서히 반향을 적용해서 자연스럽게 바뀌는 듯한 느낌을 주는 것이 좋음
  레벨 내에 위아래가 다른 지역이 있고, 두 지역에 각각 다른 DSP효과를 적용해야 하는 상황이라면 볼록 다각형 만으로는 해결할 수 없다
    이를 해결하려면 물리학에서 배울 충돌체 등을 사용해야함
기타사운드
  도플러 효과 
    도플러 시프트라고도 하며 음원이 가까워지면 음파의 주파수가 높아지며 피치가 높아지고, 멀어지면 피치가 낮아지는 효과
    도플러 효과는 음파뿐만 아니라 모든 파장에 작용함, 예시)광파(light wave)는 광원이 멀어지면 적색편이가, 가까워지면 청색편이가 일어남
    게임에서 도플러효과는 대개 자동차처럼 빠르게 움직이는 오브젝트에만 적용함. 총알같은 너무 빠른 오브젝트는 차라리 총알이 날아가는 소리를 따로 녹음했다가 재생하는 편이 낫다
    도플러 효과는 피치를 높이거나 낮추는 효과이므로 피치시프트 효과만 사용할 수 있다면 실시간으로 적용할 수 있음
사운드 폐쇄와 방해(sound occlusion and sound obstruction)
  사운드 폐쇄 :  벽을 사이에 두고 소리를 낼 때, 저음이 주로 들리고 고음이 잘 안들리는 효과
    사운드가 이미터에서 리스너로 직접 전해지지 않고 매개체를 통해 도달할 때 발생
    가장 두드러지는 효과는 로우패스필터의 효과와 같이 높은 주파수를 지닌 사운드의 볼륨이 줄어듬
      주파수가 높은 음파보다 낮은 음파가 물체를 더 쉽게 통과하기 때문, 뿐만아니라 사운드 폐쇄는 모든 사운드의 볼륨을 전체적으로 줄이는 결과을 낳음
  사운드 방해(회절) : 사운드가 직접 도달할 경로는 없지만 장애물의 주위를 돌아서 도달할 수 있을 때 발생
    예시) 기둥 반대편에 있는 사람이 소리를 지르면 기둥을 돌아서 분산한 소리가 들려옴
    사운드 방해는 장애물에 의해 나뉜 음파가 약간의 차이를 두고 도달할 수 있다는 점이 있다.
    즉 기둥 반대편에 있는 리스너에게 양쪽의 소리가 도달하는 시간이 달라지므로 리스너가 두 귀 사이에 시차를 느낄 수 있다는 뜻
  프레넬 회절(Fresnel acoustic diffraction)
    폐쇄와 방해를 확인하는 방법의 하나는 이미터에서 리스너를 향해 일련의 벡터를 만드는 것
    다른 오브젝트를 통과하지 않고 리스너에 도달할 수 있는 벡터가 하나도 없다면 사운드 폐쇄, 도달할 수 있는 벡터가 있다면 사운드 방해상태
    프레넬회절을 구현하려면 게임 세계 내의 모든 오브젝트와 벡터의 교차여부를 확인할 수 있어야함
 
연습문제
  1. 소스 사운드 데이터와 메타데이터의 차이점을 설명
    소스사운드 : 사운드 디자이너가 만든 실제 오디오파일
    메타데이터 : 소스사운드 파일을 재생해야할 방법과 상황을 나타내는 데이터
  2. 일반적인 사운드큐와 비교했을 때 '전환'할 수 있는 사운드 큐의 장점은?
    전환가능한 사운드 큐를 사용하면 상황에 따라 다양한 사운드 묶음을 재생할 수 있음
    예시)지면의 재질에 맞는 발걸음소리
  3. 리스너와 사운드 이미터에 관해 설명
  4. 삼인칭 액션게임에서 리스너의 위치를 결정할 때 고려해야 할 문제점에 관해 설명
  5. 데시벨을 높이거나 낮출 때 적용해야 할 비율에 관해 설명
    데시벨의 비율은 로그 비율을 따름
  6. 디지털신호처리(DSP)란? 소리에 적용할 수 있는 DSP효과 세 개를 예로 들어보라
    디지털신호처리는 신호의 변형과 관련있음
    예시) 반향, 피치시프트, 컴프레서
  7. DSP효과를 적용해야 할 영역을 지정할 수 있으면 좋은 이유를 설명
  8. 볼록다각형을 사용해서 DSP를 적용할 영역을 지정할 때 발생할 수 있는 문제점은?
  9. 도플러 효과를 설명
  10. 사운드 폐쇄와 사운드 방해의 차이점을 설명
